%% Define constants
lengthCP = 16;
numFreqBins = 64;
lengthWN = 64; % no cyclic prefix
numWNRepeats = 3; % lenthWN is repeated this many times
lengthKnownData = 64; % without CP
numKnownDataRepeats = 4; 
numDataBins = 10;

%% make the initial bits
txDataBits = zeros(1, numDataBins*lengthWN); 
counter = 1; 
for i = 1:length(txDataBits);
    if i <= 10*counter
        txDataBits(i) = 0;
    elseif i<= 10*counter + 9
        txDataBits(i) = 1; 
    else % last one bit, counter goes up
        txDataBits(i) = 1;
        counter = counter + 2;
    end
end

%% and the known data before hand
txKnownDataWorkspace = load('knowndata.mat');
txKnownData = txKnownDataWorkspace.known;
dataNoCP = [txKnownData, txDataBits];

%% make it a matrix and add the CP
dataNoCP = 2*dataNoCP - 1; % translates from 0 and 1 to -1 and 1
parDataNoCP = serialtoParallel(dataNoCP, numfreqcarriers);

freqDataNoCP = ifft(parDataNoCP.').';
freqData = cyclicprefix(freqDataNoCP, lengthCP); 

dataSerial = reshape(freqData.', 1, []); 

%% add white noise in front
knownWNWorkspace = load('wnlab.mat');
knownWN = knownWNWorkspace.wn;

fullWN = [];
for k = 1:numWNRepeats
    fullWN = [fullWN, knownWN];
end

fullData = [fullWN, dataSerial]; 
